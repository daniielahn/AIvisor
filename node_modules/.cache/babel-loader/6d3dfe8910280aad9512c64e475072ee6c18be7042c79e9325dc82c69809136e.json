{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Documents/SCI/sci-app/src/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const sendMessage = () => {\n    if (userInput.trim() !== '') {\n      setMessages([...messages, {\n        text: userInput,\n        sender: 'user'\n      }]);\n      setUserInput('');\n      // Simulate ChatGPT response after a short delay (in real scenario, it would be the response from the API)\n      setTimeout(() => {\n        setMessages([...messages, {\n          text: 'This is a response from ChatGPT.',\n          sender: 'bot'\n        }]);\n      }, 500);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-bubble\",\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        className: \"input-box\",\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"a9NavnWICb4yaDxbWN1at5FwvBg=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","userInput","setUserInput","messagesEndRef","scrollToBottom","current","scrollIntoView","behavior","sendMessage","trim","text","sender","setTimeout","handleKeyPress","e","key","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","target","onKeyPress","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/danny/Documents/SCI/sci-app/src/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './Chat.css';\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const sendMessage = () => {\n    if (userInput.trim() !== '') {\n      setMessages([...messages, { text: userInput, sender: 'user' }]);\n      setUserInput('');\n      // Simulate ChatGPT response after a short delay (in real scenario, it would be the response from the API)\n      setTimeout(() => {\n        setMessages([...messages, { text: 'This is a response from ChatGPT.', sender: 'bot' }]);\n      }, 500);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-messages\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.sender}`}>\n            <div className=\"message-bubble\">{message.text}</div>\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={(e) => setUserInput(e.target.value)}\n          onKeyPress={handleKeyPress}\n          className=\"input-box\"\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={sendMessage} className=\"send-button\">\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}